% Inizializzo le variabili
L = 10; % Numero di leader
T = 30; % Numero di targets
K = 1; % Maggiore di 0
delta = 0.1;
gamma = 0.5;

% Posizione dei targets
pos_followers = rand(T, 2); % Posizioni casuali per i targets
pos_leader = rand(1, 2); % Posizione casuale per il leader
leader_velocity = [0.1, 0.05]; % Velocità costante del leader

% Numero di iterazioni
num_iterations = 15;

% Parametri aggiuntivi
attraction_strength = 0.3; % Riduco la forza di attrazione tra il leader e i targets
repulsion_strength = 0.1; % Introduco una forza di repulsione tra il leader e i targets per evitare che si avvicinino troppo
leader_attraction_strength = 0.1; % Forza di attrazione del leader

% Parametri del cono di percezione
p1 = 0.9; % Peso per forte percezione
p2 = 0.1; % Peso per debole percezione
theta = pi/2; % Angolo del cono visivo

% Numero di campioni e passi di integrazione
N = 100; % Numero di campioni
ntot = 10; % Numero totale di passi

% Intervallo temporale
dt = 0.1;

% Definisco M
M = N;

% Simulazione del movimento nel tempo
figure;
hold on;
% Array per memorizzare le traiettorie di leader e targets
leader_trajectory = zeros(num_iterations, 2);
follower_trajectory = zeros(num_iterations, T, 2);
for t = 1:num_iterations
    % Memorizza le posizioni attuali di leader e targets
    leader_trajectory(t, :) = pos_leader;
    follower_trajectory(t, :, :) = pos_followers;

    % Passaggio del campo medio
    for n = 1:ntot
        % Calcolo di H medio
        H_mean = zeros(T, 2);
        for i = 1:T
            for j = 1:N
                % Campionamento di M particelle uniformemente e senza ripetizione
                samples = datasample(1:N, M, 'Replace', false);

                % Controllo 
                samples(samples > T) = T;  % Imposta a T se l'indice supera T
                
                % Calcolo di H_alpha
                H_mean(i,:) = H_mean(i,:) + H_alpha(pos_followers(i,:), pos_followers(samples(j),:), leader_velocity) * leader_velocity;
            end
            H_mean(i,:) = H_mean(i,:) / N;
        end
        
        % Aggiornamento della velocità dei target
        for i = 1:T
            pos_followers(i,:) = pos_followers(i,:) + dt * (leader_velocity * (1 - dt * H_mean(i,:)) + dt * H_mean(i,:) * leader_velocity);
        end
    end

    % Aggiornamento della posizione del leader
    pos_leader = pos_leader + leader_velocity * dt;
    
    % Restrizione delle posizioni all'interno del dominio
    pos_followers = max(0, min(1, pos_followers));
    pos_leader = max(0, min(1, pos_leader));
    
    % Visualizzazione delle posizioni
    plot(pos_leader(:,1), pos_leader(:,2), 'r-', 'LineWidth', 2);
    plot(pos_followers(:,1), pos_followers(:,2), 'b-', 'LineWidth', 1);

    % Imposto gli assi cartesiani
    xlim([0, 1]);
    ylim([0, 1]);
    
    xlabel('X');
    ylabel('Y');
    title(['Interazione ', num2str(t)]);
    legend('Leader', 'Target');
    pause(0.5);
end
hold off;

% Visualizzo le traiettorie di leader e targets
figure;
hold on;
% Indico il leader con una linea rossa
plot3(leader_trajectory(:, 1), leader_trajectory(:, 2), 1:numel(leader_trajectory(:, 1)), 'r-', 'LineWidth', 2);
% Indico il leader con una linea blu
for i = 1:T
    plot3(follower_trajectory(:, i, 1), follower_trajectory(:, i, 2), 1:numel(follower_trajectory(:, i, 1)), 'b--', 'LineWidth', 1);
end
xlabel('X');
ylabel('Y');
zlabel('Time');
title('Traiettorie di Leader e Targets');
view(3);
hold off;

% Funzione H_alpha
function force = H_alpha(x, y, v)
    % Calcola la forza H_alpha
    % Implementazione della funzione H_alpha a tua discrezione
    % Ritorna la forza H_alpha
end